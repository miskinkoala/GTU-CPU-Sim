# GTU-C312 Operating System with Macros - Complete Implementation
# Register and Memory Layout Macros
.define $PC 0
.define $SP 1
.define $SYSCALL_RES 2
.define $INSTR_COUNT 3
.define $TEMP1 4
.define $TEMP2 5
.define $TEMP3 6
.define $TEMP4 7
.define $TEMP5 8
.define $TEMP6 9
.define $PARAM1 10
.define $PARAM2 11
.define $PARAM3 12
.define $ZERO 13
.define $FP 14
.define $STORE15 15
.define $STORE16 16
.define $STORE17 17
.define $STORE18 18


# Memory Layout Constants
.define @KERNEL_START 21
.define @KERNEL_END 999
.define @USER_START 1000
.define @THREAD1_START 1000
.define @THREAD1_END 1999
.define @THREAD2_START 2000
.define @THREAD2_END 2999
.define @THREAD3_START 3000
.define @THREAD3_END 3999
.define @THREAD4_START 4000
.define @THREAD4_END 4999
.define @THREAD5_START 5000
.define @THREAD5_END 5999
.define @THREAD6_START 6000
.define @THREAD6_END 6999
.define @THREAD7_START 7000
.define @THREAD7_END 7999
.define @THREAD8_START 8000
.define @THREAD8_END 8999
.define @THREAD9_START 9000
.define @THREAD9_END 9999
.define @THREAD10_START 10000
.define @THREAD10_END 10999
.define @THREAD_TABLE_BASE 40

# Sentinel Values
.define SENTINEL_DEAD 57005
.define SENTINEL_BEEF 48879

# Thread States
.define THREAD_INACTIVE 0
.define THREAD_READY 1
.define THREAD_RUNNING 2
.define THREAD_BLOCKED 3

# System Configuration
.define MAX_THREADS 11
.define THREAD_ENTRY_SIZE 10

# OS Data Locations
.define @OS_STATE 25
.define @CURRENT_THREAD 23
.define @THREAD_COUNT 22
.define @SCHEDULER_COUNTER 24
.define @CONTEXT_SWITCH_FLAG 26
.define @NEXT_THREAD 165
.define @ACTIVE_THREAD_COUNT 174
.define @COMPLETED_THREAD_COUNT 175

# Debug Configuration
.ifdef DEBUG
.define DEBUG_PRINT SYSCALL PRN
.else
.define DEBUG_PRINT
.endif

#GTU-C312 Operating System with Cooperative Multitasking
Begin Data Section
# CPU Registers (Memory-mapped)
$PC 100
$SP 1000
$SYSCALL_RES 0
$INSTR_COUNT 0
$TEMP1 0
$TEMP2 0
$TEMP3 0
$TEMP4 0
$TEMP5 0
$TEMP6 0
$PARAM1 0
$PARAM2 0
$PARAM3 0
$ZERO 0
$FP 0
$STORE15 0
$STORE16 0
$STORE17 0
$STORE18 0
19 0
20 0

# OS Data Area (21-999) - Kernel mode only
@KERNEL_START SENTINEL_DEAD
@THREAD_COUNT MAX_THREADS
@CURRENT_THREAD 0
@SCHEDULER_COUNTER 0
@OS_STATE 1
@CONTEXT_SWITCH_FLAG 0
27 0
28 @THREAD_TABLE_BASE
29 0
30 1



#ID:1 starting time:2 how many execution:3 so far in the thread:4 state:5, PC:6, SP:7, FP:8,
# Thread Table Structure (4 threads * 10 words each)
# Thread 0 (OS itself)
#######THREAD TABLE#######

@THREAD_TABLE_BASE 0
41 0
42 0
43 THREAD_RUNNING
44 @KERNEL_START
45 @KERNEL_END
46 @KERNEL_END
47 0
48 0
49 0

# Thread 1 (Sorting Thread) - FIXED STACK SIZE
50 1
51 0
52 0
53 THREAD_READY
54 @THREAD1_START
55 @THREAD1_END
56 @THREAD1_END
57 0
58 0
59 0

# Thread 2 (Search Thread) - FIXED STACK SIZE
60 2
61 0
62 0
63 THREAD_READY
64 @THREAD2_START
65 @THREAD2_END
66 @THREAD2_END
67 0
68 0
69 0

# Thread 3 (Custom Thread) - FIXED STACK SIZE
70 3
71 0
72 0
73 THREAD_READY
74 @THREAD3_START
75 @THREAD3_END
76 @THREAD3_END
77 0
78 0
79 0

# Thread 4 (placeholder Thread) - FIXED STACK SIZE
80 4
81 0
82 0
83 THREAD_READY
84 @THREAD4_START
85 @THREAD4_END
86 @THREAD4_END
87 0
88 0
89 0

# Thread 5 (placeholder Thread) - FIXED STACK SIZE
90 5
91 0
92 0
93 THREAD_READY
94 @THREAD5_START
95 @THREAD5_END
96 @THREAD5_END
97 0
98 0
99 0

# Thread 6 (placeholder Thread) - FIXED STACK SIZE
100 6
101 0
102 0
103 THREAD_READY
104 @THREAD6_START
105 @THREAD6_END
106 @THREAD6_END
107 0
108 0
109 0

# Thread 7 (Custom Thread) - FIXED STACK SIZE
110 7
111 0
112 0
113 THREAD_READY
114 @THREAD7_START
115 @THREAD7_END
116 @THREAD7_END
117 0
118 0
119 0

# Thread 8 (placeholder Thread) - FIXED STACK SIZE
120 8
121 0
122 0
123 THREAD_READY
124 @THREAD8_START
125 @THREAD8_END
126 @THREAD8_END
127 0
128 0
129 0

# Thread 9 (placeholder Thread) - FIXED STACK SIZE
130 9
131 0
132 0
133 THREAD_READY
134 @THREAD9_START
135 @THREAD9_END
136 @THREAD9_END
137 0
138 0
139 0

# Thread 10 (placeholder Thread) - FIXED STACK SIZE
140 6
141 0
142 0
143 THREAD_READY
144 @THREAD10_START
145 @THREAD10_END
146 @THREAD10_END
147 0
148 0
149 0


# OS Working Variables
160 0
161 0
162 0
163 0
164 0
@NEXT_THREAD 1
170 0
171 0
172 0
173 0
@ACTIVE_THREAD_COUNT 4
@COMPLETED_THREAD_COUNT 0

@KERNEL_END SENTINEL_BEEF

# Thread 1 Data Area (1000-1999) - Bubble Sort
@THREAD1_START 0
1001 5
1002 64
1003 34
1004 25
1005 12
1006 90
1007 0
1008 0
1009 0
1010 0

# Thread 2 Data Area (2000-2999) - Linear Search
@THREAD2_START 0
2001 5
2002 25
2003 64
2004 34
2005 25
2006 12
2007 90
2008 -1
2009 0
2010 0

# Thread 3 Data Area (3000-3999) - Factorial Calculator
@THREAD3_START 0
3001 5
3002 1
3003 1
3004 0
3005 0

End Data Section

Begin Instruction Section
# OS Boot and Initialization (Instructions 100-199)
100 SET 0 $ZERO
101 SET 1 @OS_STATE
102 SET 0 @CURRENT_THREAD


104 CALL 200
105 SET 110 $PC

# Main OS Loop (Instructions 110-150)
110 CPY @OS_STATE $TEMP1
111 SUBI $SYSCALL_RES $TEMP1 #if sys call result = 1 then it will jump shutdown OS
112 JIF $TEMP1 190
113 CPY @COMPLETED_THREAD_COUNT $TEMP2
114 SUBI @ACTIVE_THREAD_COUNT $TEMP2 #when compleated_thread_count - 4(@ACTIVE_THREAD_COUNT) == 0 jump thread complete scenerio
115 JIF $TEMP2 180
116 CALL 400
117 CALL 500
118 ADD @SCHEDULER_COUNTER 1
119 SET 110 0

# All Threads Completed Handler (Instructions 180-189)
180 SET SENTINEL_DEAD $TEMP1
181 SYSCALL PRN $TEMP1
182 SET 2 @OS_STATE
183 SET 190 0

# OS Shutdown Sequence (Instructions 190-199)
190 SET SENTINEL_BEEF $TEMP1
191 SYSCALL PRN $TEMP1
192 HLT

# Thread Table Initialization (Instructions 200-250) - FIXED
# temp1: frame pointer, 
#
200 CPY $FP $TEMP1
201 CPY $SP $FP
202 CPY @THREAD_TABLE_BASE $TEMP2
203 SET 0 $TEMP3              # Initialize counter to 0
204 CPY @THREAD_COUNT $TEMP4  # Load thread count
205 SUBI $TEMP3 $TEMP4        # temp4 = thread_count - counter
206 JIF $TEMP4 250            # Exit if thread_count - counter <= 0 (i.e., counter >= thread_count)
207 CPY $TEMP2 $PARAM1
208 CPY $TEMP3 $PARAM2
209 CALL 260
210 ADD $TEMP2 THREAD_ENTRY_SIZE
211 ADD $TEMP3 1              # Increment counter
212 SET 204 0                 # Jump back to loop condition
250 CPY $TEMP1 $FP
251 RET

# Thread Initialization Helper (Instructions 260-290)
#$PARAM1 (register 10): Pointer to the thread 
#$PARAM2 (register 11): Thread ID (0 for OS, 1-3 for user threads)
260 CPY $PARAM1 $TEMP2        # Copy thread table pointer
261 CPY $PARAM2 $TEMP3        # Copy thread ID
262 CPY $TEMP3 $TEMP2
263 ADD $TEMP2 1              # Move to starting time field
264 CPY $INSTR_COUNT $TEMP4   # Get current instruction count
265 CPY $TEMP4 $TEMP2         # ✅ FIXED - Copy instruction count to memory
266 ADD $TEMP2 2              # Move to instructions used field
267 SET 0 $TEMP2              # ✅ CORRECT - Set constant 0
268 ADD $TEMP2 1              # Move to state field
269 CPY $TEMP3 $TEMP4         # Copy thread ID
270 JIF $TEMP4 280            # If thread ID = 0, jump to set RUNNING
271 CPY $TEMP3 $TEMP5         # Copy thread ID
272 SUBI @THREAD_COUNT $TEMP5  # Calculate: 3 - thread_ID
273 JIF $TEMP5 285            # If thread_ID > 3, jump to set INACTIVE
274 SET THREAD_READY $TEMP2   # ✅ CORRECT - THREAD_READY is constant (1)
275 SET 290 0                 # Jump to return
280 SET THREAD_RUNNING $TEMP2 # ✅ CORRECT - THREAD_RUNNING is constant (2)
281 SET 290 0                 # Jump to return
285 SET THREAD_INACTIVE $TEMP2 # ✅ CORRECT - THREAD_INACTIVE is constant (0)
290 RET


# Main Scheduler (Instructions 400-450)
400 CPY $FP $TEMP1
401 CPY $SP $FP
402 CPY @CURRENT_THREAD $TEMP2
403 JIF $TEMP2 420
404 SET 450 0
420 CALL 600
421 CPY @NEXT_THREAD $TEMP3
422 JIF $TEMP3 450
423 SET $TEMP3 @CURRENT_THREAD
424 CALL 700
450 CPY $TEMP1 $FP
451 RET

# System Call Handler (Instructions 500-550)
500 CPY $SYSCALL_RES $PARAM1
501 JIF $PARAM1 550
502 CPY $PARAM1 $TEMP1
503 SUBI 1 $TEMP1
504 JIF $TEMP1 510
505 ADD $TEMP1 1
506 SUBI 2 $TEMP1
507 JIF $TEMP1 520
508 ADD $TEMP1 2
509 SUBI 3 $TEMP1
510 JIF $TEMP1 530
511 SET 550 0
512 SET 100 $PARAM2
513 SET 550 0
520 SET 1 @CONTEXT_SWITCH_FLAG
521 SET 0 @CURRENT_THREAD
522 SET 550 0
530 CALL 800
531 SET 550 0
550 SET 0 $SYSCALL_RES
551 RET

# Find Next Ready Thread (Instructions 600-650)
600 CPY 30 $TEMP1
601 ADD $TEMP1 1
602 CPY $TEMP1 $TEMP2
603 SUBI 3 $TEMP2
604 JIF $TEMP2 610
605 SET 620 0
610 SET 1 $TEMP1
620 SET @THREAD_TABLE_BASE $TEMP2
621 CPY $TEMP1 $TEMP3
622 CALL 850
623 CPY $PARAM3 $TEMP4
624 ADD $TEMP4 3
625 CPY $TEMP4 $TEMP5
626 SUBI THREAD_READY $TEMP5
627 JIF $TEMP5 640
628 ADD $TEMP1 1
629 CPY $TEMP1 $TEMP6
630 SUBI 3 $TEMP6
631 JIF $TEMP6 635
632 SET 622 0
635 SET 1 $TEMP1
636 SET 622 0
640 SET $TEMP1 30
641 SET $TEMP1 @NEXT_THREAD
650 RET

# Context Switch (Instructions 700-750)
700 CPY $FP $TEMP1
701 CPY $SP $FP
702 CPY @CURRENT_THREAD $TEMP2
703 CPY $TEMP2 $PARAM1
704 CALL 850
705 CPY $PARAM3 $TEMP3
706 ADD $TEMP3 4
707 CPY $PC $TEMP4
708 SET $TEMP4 $TEMP3
709 ADD $TEMP3 1
710 CPY $SP $TEMP5
711 SET $TEMP5 $TEMP3
712 CPY @NEXT_THREAD $TEMP2
713 SET $TEMP2 @CURRENT_THREAD
714 CPY $TEMP2 $PARAM1
715 CALL 850
716 CPY $PARAM3 $TEMP3
717 ADD $TEMP3 4
718 CPY $TEMP3 $TEMP4
719 SET $TEMP4 $PC
720 ADD $TEMP3 1
721 CPY $TEMP3 $TEMP5
722 SET $TEMP5 $SP
723 USER @THREAD1_START
750 RET

# Thread Completion Handler (Instructions 800-830)
800 CPY @CURRENT_THREAD $TEMP1
801 CPY $TEMP1 $PARAM1
802 CALL 850
803 CPY $PARAM3 $TEMP2
804 ADD $TEMP2 3
805 SET THREAD_INACTIVE $TEMP2
806 ADD @COMPLETED_THREAD_COUNT 1
807 SET 0 @CURRENT_THREAD
808 RET

# Calculate Thread Address Helper (Instructions 850-870)
850 SET @THREAD_TABLE_BASE $PARAM2
851 CPY $PARAM1 $PARAM3
852 ADD $PARAM3 $PARAM3
853 ADD $PARAM3 $PARAM3
854 ADD $PARAM3 $PARAM3
855 ADD $PARAM3 $PARAM3
856 ADD $PARAM3 $PARAM3
857 ADD $PARAM2 $PARAM3
858 RET

# Thread 1: Bubble Sort Implementation (Instructions 1000-1100)
@THREAD1_START SET 1002 $TEMP1
1001 CPY 1001 $TEMP2
1002 SET 0 1008
1003 CPY 1008 $TEMP3
1004 SUBI $TEMP2 $TEMP3
1005 JIF $TEMP3 1080
1006 SET 0 1009
1007 CPY 1009 $TEMP4
1008 CPY $TEMP2 $TEMP5
1009 SUBI $TEMP5 1008
1010 SUBI $TEMP5 $TEMP4
1011 JIF $TEMP5 1070
1012 CPY $TEMP1 $TEMP6
1013 ADD $TEMP6 $TEMP4
1014 CPY $TEMP6 $PARAM1
1015 ADD $TEMP6 1
1016 CPY $TEMP6 $PARAM2
1017 CPY $PARAM1 $PARAM3
1018 SUBI $PARAM2 $PARAM3
1019 JIF $PARAM3 1065
1020 SET $PARAM2 $TEMP6
1021 SUBI $TEMP6 1
1022 SET $PARAM1 $TEMP6
1065 ADD 1009 1
1066 SYSCALL YIELD
1067 SET 1007 0
1070 ADD 1008 1
1071 SET 1003 0
1080 SYSCALL PRN 1002
1081 SYSCALL PRN 1003
1082 SYSCALL PRN 1004
1083 SYSCALL PRN 1005
1084 SYSCALL PRN 1006
1085 SYSCALL HLT

# Thread 2: Linear Search Implementation (Instructions 2000-2100)
@THREAD2_START SET 2003 $TEMP1
2001 CPY 2001 $TEMP2
2002 CPY 2002 $TEMP3
2003 SET 0 2009
2004 SET -1 2008
2005 CPY 2009 $TEMP4
2006 SUBI $TEMP2 $TEMP4
2007 JIF $TEMP4 2090
2008 CPY $TEMP1 $TEMP5
2009 ADD $TEMP5 $TEMP4
2010 CPY $TEMP5 $TEMP6
2011 CPY $TEMP3 $PARAM1
2012 SUBI $PARAM1 $TEMP6
2013 JIF $PARAM1 2080
2014 ADD 2009 1
2015 SYSCALL YIELD
2016 SET 2005 0
2080 SET 2009 2008
2090 SYSCALL PRN 2008
2091 SYSCALL HLT

# Thread 3: Factorial Calculator (Instructions 3000-3100)
@THREAD3_START CPY 3001 $TEMP1
3001 SET 1 3002
3002 SET 1 3003
3003 CPY 3003 $TEMP2
3004 SUBI $TEMP1 $TEMP2
3005 JIF $TEMP2 3090
3006 CPY 3002 $TEMP3
3007 CPY 3003 $TEMP4
3008 CALL 3050
3009 CPY $PARAM3 3002
3010 ADD 3003 1
3011 SYSCALL YIELD
3012 SET 3003 0
3050 SET 0 $PARAM3
3051 JIF $TEMP4 3070
3052 ADD $PARAM3 $TEMP3
3053 ADD $TEMP4 -1
3054 SET 3051 0
3070 RET
3090 SYSCALL PRN 3002
3091 SYSCALL HLT

End Instruction Section
